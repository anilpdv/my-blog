{"version":3,"sources":["webpack:///./node_modules/reading-time/index.js","webpack:///./src/pages/index.js","webpack:///./node_modules/reading-time/lib/reading-time.js"],"names":["module","exports","BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","systemFont","length","style","listStyle","filter","post","frontmatter","map","text","rt","fields","slug","key","itemScope","itemType","fontFamily","fontSize","rhythm","marginBottom","boxShadow","to","itemProp","fontStyle","date","html","readingTime","console","log","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery","ansiWordBound","c","options","wordBound","i","words","start","end","wordsPerMinute","minutes","time","Math","ceil","toFixed"],"mappings":";gFAAAA,EAAOC,QAAU,EAAQ,S,kCCAzB,2JA6FeC,UAnFG,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAQN,EAAKO,kBAAkBC,MAC/BC,EAAU,qKAIhB,GAAqB,IAAjBH,EAAMI,OACR,OACE,kBAAC,IAAD,CAAQT,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACA,yLAeN,OACE,kBAAC,IAAD,CAAQJ,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACA,wBAAIM,MAAO,CAAEC,UAAU,SACpBN,EACEO,QAAO,SAAAC,GAAI,MAA+B,aAA3BA,EAAKC,YAAYV,SAChCW,KAAI,SAAAF,GACH,IAdaG,EACjBC,EAaUb,EAAQS,EAAKC,YAAYV,OAASS,EAAKK,OAAOC,KAEpD,OACE,wBAAIC,IAAKP,EAAKK,OAAOC,MACnB,6BACEE,WAAS,EACTC,SAAS,4BACTZ,MAAO,CAAEa,WAAYf,IAErB,gCACE,wBACEE,MAAO,CACLa,WAAY,yBACZC,SAAUC,YAAO,GACjBC,aAAcD,YAAO,EAAI,KAG3B,kBAAC,OAAD,CACEf,MAAO,CAAEiB,UAAW,QACpBC,GAAIf,EAAKK,OAAOC,KAChBU,SAAS,OAET,0BAAMA,SAAS,YAAYzB,KAG/B,2BAAOM,MAAO,CAAEc,SAAU,OAAQM,UAAW,WAC1CjB,EAAKC,YAAYiB,KAAM,IACxB,0CAzCGf,EAyC8BH,EAAKmB,KAxCpDf,EAAKgB,IAAYjB,GACrBkB,QAAQC,IAAIlB,EAAID,GACTC,EAAGD,SAyCI,iCACE,uBACEoB,wBAAyB,CACvBC,OAAQxB,EAAKC,YAAYwB,aAAezB,EAAK0B,SAE/CV,SAAS,cACTnB,MAAO,CAAEa,WAAYf,cAcpC,IAAMgC,EAAS,c,kCCxFtB,SAASC,EAAcC,GACrB,MAAO,MAAQA,GAAK,OAASA,GAAK,OAASA,GAAK,OAASA,EAoD3D9C,EAAOC,QAjDP,SAAqBmB,EAAM2B,GACzB,IAGIC,EACAC,EAJAC,EAAQ,EACRC,EAAQ,EACRC,EAAMhC,EAAKP,OAAS,EASxB,KANAkC,EAAUA,GAAW,IAEbM,eAAiBN,EAAQM,gBAAkB,IAEnDL,EAAYD,EAAQC,WAAaH,EAE1BG,EAAU5B,EAAK+B,KACpBA,IAGF,KAAOH,EAAU5B,EAAKgC,KACpBA,IAIF,IAAKH,EAAIE,EAAOF,GAAKG,GAAM,CACzB,KAAOH,GAAKG,IAAQJ,EAAU5B,EAAK6B,IAAKA,KAMxC,IAFAC,IAEOD,GAAKG,GAAOJ,EAAU5B,EAAK6B,IAAKA,MAMzC,IAAIK,EAAUJ,EAAQH,EAAQM,eAC1BE,EAAiB,GAAVD,EAAe,IAE1B,MAAO,CACLlC,KAFcoC,KAAKC,KAAKH,EAAQI,QAAQ,IAEtB,YAClBJ,QAASA,EACTC,KAAMA,EACNL,MAAOA","file":"component---src-pages-index-js-437e7cbd6e92fa93f2f3.js","sourcesContent":["module.exports = require('./lib/reading-time');","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport { rhythm, scale } from \"../utils/typography\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport readingTime from \"reading-time\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const systemFont = `system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\",\n  \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\n  \"Droid Sans\", \"Helvetica Neue\", sans-serif`\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  const getReadingTime = text => {\n    let rt = readingTime(text)\n    console.log(rt, text)\n    return rt.text\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts\n          .filter(post => post.frontmatter.title !== \"About me\")\n          .map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n\n            return (\n              <li key={post.fields.slug}>\n                <article\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                  style={{ fontFamily: systemFont }}\n                >\n                  <header>\n                    <h3\n                      style={{\n                        fontFamily: \"Montserrat, sans-serif\",\n                        fontSize: rhythm(1),\n                        marginBottom: rhythm(1 / 4),\n                      }}\n                    >\n                      <Link\n                        style={{ boxShadow: \"none\" }}\n                        to={post.fields.slug}\n                        itemProp=\"url\"\n                      >\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h3>\n                    <small style={{ fontSize: \"12px\", fontStyle: \"italic\" }}>\n                      {post.frontmatter.date}{\" \"}\n                      <strong>{`   *  ${getReadingTime(post.html)}`}</strong>\n                    </small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                      style={{ fontFamily: systemFont }}\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        html\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n","/*!\n * reading-time\n * Copyright (c) Nicolas Gryman <ngryman@gmail.com>\n * MIT Licensed\n */\n'use strict';\n\nfunction ansiWordBound(c) {\n  return ' ' === c || '\\n' === c || '\\r' === c || '\\t' === c;\n}\n\nfunction readingTime(text, options) {\n  var words = 0,\n      start = 0,\n      end = text.length - 1,\n      wordBound,\n      i;\n  options = options || {}; // use default values if necessary\n\n  options.wordsPerMinute = options.wordsPerMinute || 200; // use provided function if available\n\n  wordBound = options.wordBound || ansiWordBound; // fetch bounds\n\n  while (wordBound(text[start])) {\n    start++;\n  }\n\n  while (wordBound(text[end])) {\n    end--;\n  } // calculate the number of words\n\n\n  for (i = start; i <= end;) {\n    for (; i <= end && !wordBound(text[i]); i++) {\n      ;\n    }\n\n    words++;\n\n    for (; i <= end && wordBound(text[i]); i++) {\n      ;\n    }\n  } // reading time stats\n\n\n  var minutes = words / options.wordsPerMinute;\n  var time = minutes * 60 * 1000;\n  var displayed = Math.ceil(minutes.toFixed(2));\n  return {\n    text: displayed + ' min read',\n    minutes: minutes,\n    time: time,\n    words: words\n  };\n}\n/**\n * Export\n */\n\n\nmodule.exports = readingTime;"],"sourceRoot":""}